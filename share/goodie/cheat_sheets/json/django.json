{
    "id": "django_cheat_sheet",
    "name": "Django",
    "description": "An overview of common django framework functions and tools.",

    "metadata": {
        "sourceName": "Django Project",
        "sourceUrl": "https://docs.djangoproject.com/"
    },

    "aliases": [
        "pydjango", "python django","django admin commands","django manage.py commands","django-admin"
    ],

    "template_type": "terminal",

    "section_order": [
        "Django-admin/Manage.py commands",
        "App Files"
    ],
    "sections": {
        "Django-admin/Manage.py commands": [
            {
                "key": "django-admin help",
                "val": "Display usage information and a list of the commands provided by each application"
            }, 
            {
                "key": "django-admin help --commands",
                "val": "Display a list of all available commands"
            },
            {
                "key": "django-admin help <command>",
                "val": "Display a description of the given command and a list of its available options"
            },
            {
                "key": "django-admin version",
                "val": "Display the current Django version"
            },
            {
                "key": "django-admin check",
                "val": "Inspect the entire Django project for common problems"
            },
            {
                "key": "django-admin compilemessages",
                "val": "Compile .po files created by makemessages to .mo files for use with the built-in gettext support"
            },
            {
                "key": "django-admin createcachetable",
                "val": "Create the cache tables for use with the database cache backend using the information from your settings file"
            },  
            {
                "key": "django-admin dbshell",
                "val": "Run the command-line client for the database engine specified in your ENGINE setting, with the connection parameters specified in your USER, PASSWORD, etc., settings"
            },
            {
                "key": "django-admin diffsettings",
                "val": "Display differences between the current settings file and Djangoâ€™s default settings"
            },
            {
                "key": "django-admin dumpdata \\[app_label\\[.ModelName\\] \\[app_label\\[.ModelName\\] ...\\]\\]",
                "val": "outputs to standard output all data in the database associated with the named application(s)"
            },
            {
                "key": "django-admin flush",
                "val": "Remove all data from the database and re-executes any post-synchronization handlers"
            },
            {
                "key": "django-admin inspectdb",
                "val": "Introspect the database tables in the database pointed-to by the NAME setting and outputs a Django model module (a models.py file) to standard output"
            },
            {
                "key": "django-admin loaddata fixture \\[fixture ...\\]",
                "val": "Searche for and loads the contents of the named fixture into the database"
            },
            {
                "key": "django-admin makemessages",
                "val": "Run over the entire source tree of the current directory and pulls out all strings marked for translation"
            },
            {
                "key": "django-admin makemigrations",
                "val": "Create new migrations based on the changes detected to your models"
            },
            {
                "key": "django-admin migrate \\[app_label\\] \\[migration_name\\]",
                "val": "Synchronize the database state with the current set of models and migrations"
            },
            {
                "key": "django-admin runserver \\[addrport\\]",
                "val": "Start a lightweight development Web server on the local machine"
            },
            {
                "key": "django-admin sendtestemail \\[email \\[email ...\\]\\]",
                "val": "Send a test email (to confirm email sending through Django is working) to the recipient(s) specified"
            },
            {
                "key": "django-admin shell",
                "val": "Start the Python interactive interpreter"
            },
            {
                "key": "django-admin showmigrations \\[app_label \\[app_label ...\\]\\]",
                "val": "Show all migrations in a project"
            },
            {
                "key": "django-admin sqlflush",
                "val": "Print the SQL statements that would be executed for the flush command"
            },
            {
                "key": "django-admin sqlmigrate app_label migration_name",
                "val": "Print the SQL for the named migration"
            },
            {
                "key": "django-admin sqlsequencereset app_label \\[app_label ...\\]",
                "val": "Print the SQL statements for resetting sequences for the given app name(s)"
            },
            {
                "key": "django-admin squashmigrations app_label \\[start_migration_name\\] migration_name",
                "val": "Squash the migrations for app_label up to and including migration_name down into fewer migrations, if possible"
            },
            {
                "key": "django-admin startapp name \\[directory\\]",
                "val": "Create a Django app directory structure for the given app name in the current directory or the given destination"
            },
            {
                "key": "django-admin startproject name \\[directory\\]",
                "val": "Create a Django project directory structure for the given project name in the current directory or the given destination"
            },
            {
                "key": "django-admin test \\[test_label \\[test_label ...\\]\\]",
                "val": "Runs tests for all installed apps"
            },
            {
                "key": "django-admin testserver \\[fixture \\[fixture ...\\]\\]",
                "val": "Run a Django development server (as in runserver) using data from the given fixture(s)"
            }
        ],
        
        "App Files": [
            {
                "key": "/<app_name>/admin.py",
                "val": "An interface to the django admininistration application"
            },
            {
                "key": "/<app_name>/apps.py",
                "val": "Includes any application configuration for the app"
            },
            {
                "key": "/<app_name>/models.py",
                "val": "Contains model definations for the application"
            },
            {
                "key": "/<app_name>/tests.py",
                "val": "For maintaining tests for that particular application"
            },
            {
                "key": "/<app_name>/views.py",
                "val": "Creates functions for the public interface of the app"
            },
            {
                "key": "/<app_name>/templates/<app_name>/",
                "val": "The templates directory for the application"
            }
        ]
    }
}